,NL,OCL,Candidate,BLEU,Key_metric
0," bankcard is the object ban in the instance set of class BankCard. ban represents an object of class BankCard, and ban meets:
      The attribute CardID of the object ban is equal to cardid","   bankcard:BankCard = BankCard.allInstance()->any(ban:BankCard | ban.CardID = cardid)
","   bankcard:BankCard = BankCard.allInstance()->any(ban:BankCard | ban.CardID = cardid)
",100.00000000000004,100.0
1,"RemoveStructuralFeatureValueActions removing a value from ordered, non-unique StructuralFeatures must
have a single removeAt InputPin and no value InputPin, if isRemoveDuplicates is false. The removeAt
InputPin must be of type Unlimited Natural with multiplicity 1..1. Otherwise, the Action has a value InputPin
and no removeAt InputPin.","if structuralFeature.isOrdered and not structuralFeature.isUnique and not
isRemoveDuplicates then
value = null and
removeAt <> null and
removeAt.type = UnlimitedNatural and
removeAt.is(1,1)
else
removeAt = null and value <> null
endif","self.isOrdered and notself.isUnique or (self.isRemoveDuplicates and
self.removeAt in
not (self.removeAt.isUnlimited or self.removeAt.is(1,1)))",15.985168872252874,10.8281
2,All containedNodes and containedEdges of an ActivityGroup must be in the same Activity as the group.,"containedNode->forAll(activity = self.containingActivity()) and
containedEdge->forAll(activity = self.containingActivity())",group.containingNode->forAll(isInActivity) and contains(group.containingNode)),8.334819428924733,17.06576
3,All Ports are owned by an EncapsulatedClassifier.,owner = encapsulatedClassifier,self.owner.oclIsKindOf(Classifier) else self.ownedPort->forAll(p | p.oclIsKindOf(Port) and p.oclAsType(Port).owner = self,2.177002209903929,2.177
4,"if the attribute points is greater than zero, there exists a Transaction with points greater than zero",points > 0 implies transactions->exists(t | t.points > 0),if self.point>0 then self.txs->exists(p | p.points>0) else self.txs->exists(p | p.points > 0),16.142729064959916,28.46288
5,"It must be possible for at least one instance of one optional child object (i.e., an object for which the occurrences lower
bound is 0) and one instance of every mandatory child object (i.e., object constraints for which the occurrences lower
bound is >= 1) to be included within the cardinality range.","self->select(s|s.namespace.stereotypedBy('ComplexObjectConstraint'))
.subsettedProperty->union(self.redefinedProperty) ->select(r|r.upper>0) ->
forAll(refProperty| self.namespace.oclAsType(Class).ownedAttribute->
select(sibling|sibling.subsettedProperty->union(sibling.redefinedProperty)->
includes(refProperty)).lower->sum()<=(refProperty.upper-1) )","self.mandatoryChild->forAll(allInstances->size() >= 1 and
self.mandatoryChild->forAll(allInstances->forAll(oclIsKindOf(ObjectConstraint)) and
allInstances->includes(oclIsKindOf(ObjectConstraint))))",3.3488496010588444,6.14957
6,"If allowSubstitutable is true, then there must be a constrainingClassifier.",allowSubstitutable implies constrainingClassifier->notEmpty(),"if self.allowSubstitutable then self.constrainingClassifier <> null
else self.constrainingClassifier = null
",2.719665272174911,0.0
7,"The interaction operators 'consider' and 'ignore' can only be used for the ConsiderIgnoreFragment subtype of
CombinedFragment.","((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =
InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)","self.combinedFragment.interactionOperator = InteractionOperatorKind::consider and
self.combinedFragment.interactionOperator = InteractionOperatorKind::ignore",38.792226145038484,44.84671
8,"The end attribute of the applied stereotype shall refer to a member end of the association block owning the
property on which the stereotype is applied.",self.base_Property.association.memberEnd->includes(self.end),"self.base_Association.end =
end.attribute->any(v | v.association.blocks->includes(self.base_Association.end)
)",23.955116495457894,33.00364
9,Every Generalization associated with a particular GeneralizationSet must have the same general Classifier.,generalization->collect(general)->asSet()->size() <= 1,generalizationSet.allGeneralizationSets()->forAll(p | generalization->includes(p.generalClassifier)),16.195570128532403,0.0
10," The value of temporary variable CurrentLoanRequests became rs
  The return value was rs","   self.CurrentLoanRequests = rs and
   result = rs
","   self.CurrentLoanRequests = rs and
   result = rs
",100.00000000000004,100.0
11," loans is the set of class Loan, including all loan in the instance set of class Loan. loan represents an object of class Loan, and loan meets:
      The attribute IsReturned of the object loan is equal to false
      The attribute DueDate of the object loan is before Today","   loans:Set(Loan) = Loan.allInstance()->select(loan:Loan | loan.IsReturned = false and loan.DueDate.isBefore(Today))
","   loans:Set(Loan) = Loan.allInstance()->select(loan:Loan | loan.IsReturned = false and
   loan.DueDate <= Today)
",84.26876061809608,52.89474
12,"The example rule checks every transaction in the message and if one of the amounts is greater than 100, true will be returned. First a variable ""a"" is declared for the individual transaction. The condition statement is separated with a ""|""-sign. Then the statement is checked for every transaction in the message. If one of the amounts is greater than 100, true will be returned.", self.Transaction->exists(a|a.Amount > 100),"self.Transaction.AllInstances().Transaction->forAll(a:Transaction |
 ""a.Amount > 100)""",28.802090912164054,0.0
13," loanterm exists
  The object loanterm is in the instance set of class LoanTerm","   loanterm.oclIsUndefined() = false and
   LoanTerm.allInstance()->includes(loanterm)
","   loanterm.oclIsUndefined() = false and
   LoanTerm.allInstance()->includes(loanterm)
",100.00000000000004,100.0
14," The attribute Status of the object CurrentLoanRequest became APPROVED
  The return value was true","   self.CurrentLoanRequest.Status = LoanRequestStatus::APPROVED and
   result = true
","   self.CurrentLoanRequest.Status = LoanRequestStatus::APPROVED and
   result = true
",100.00000000000004,100.0
15, The authorname is not equal to null,"   authorname <> """"
","   authorname <> null
",46.30777161991026,63.00751
16,"If any of the parent Classifiers are a template, then the extendedSignature must include the signature of that Classifier.",classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature)),"self.base_Classifier.oclIsKindOf(UML::Template) implies self.base_Classifier.base_Classifier.signature->subSequence(1, signature->size())",4.223886871268327,22.18129
17,A binding of a PropertyTemplateParameter representing an attribute must be to an attribute.,(self.isAttribute() and (templateParameterSubstitution->notEmpty()) implies (templateParameterSubstitution->forAll(ts | ts.formal.oclIsKindOf(Property) and ts.formal.oclAsType(Property).isAttribute()))),binding.targetAttribute.oclIsKindOf(UML::Attribute),0.6579836875486078,3.57506
18,The non-owned end of an Extension is typed by a Class.,metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class),not self.owner.oclIsKindOf(Class),15.377854660688898,16.22549
19,Generalization hierarchies must be directed and acyclical. A classifier cannot be both a transitively general and transitively specific classifier of the same classifier.,not self.allParents()->includes(self),(self.kind = ConcreteClassorClassKind::directed and self.kind = ConcreteClassorClassKind::achectlal) implies (self.base_Class = classifier),4.1858747270392405,0.0
20,An InstanceSpecification can act as a DeploymentTarget if it represents an instance of a Node and functions as a part in the internal structure of an encompassing Node.,deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node))),"self.base_Class.isStereotyped(""Node"") and self.base_Class.part->includes(self.base_Class)",4.171175092447803,13.763
21, The example rule check the length of the value of <Id> element and check that it is less than or equal to 20.,self.Id.size() <= 20,self.Id.length() < 20,39.9387917637788,39.93879
22," copy represented the object of class BookCopy
  The object copy was created
  The attribute Barcode of the object copy became barcode
  The attribute Status of the object copy became AVAILABLE
  The attribute Location of the object copy became location
  The attribute IsReserved of the object copy became false
  The object book was linked to the object copy by Copys
  The object copy was linked to the object book by BookBelongs
  The attribute CopyNum of the object book became the previous value of the attribute CopyNum of the object book plus 1
  The object copy was put into the instance set of class BookCopy
  The return value was true","   let copy:BookCopy in
   copy.oclIsNew() and
   copy.Barcode = barcode and
   copy.Status = CopyStatus::AVAILABLE and
   copy.Location = location and
   copy.IsReserved = false and
   book.Copys->includes(copy) and
   copy.BookBelongs = book and
   book.CopyNum = book.CopyNum@pre + 1 and
   BookCopy.allInstance()->includes(copy) and
   result = true
","   let copy:BookCopy in
   copy.oclIsNew() and
   copy.Barcode = barcode and
   copy.Status = CopyStatus::AVAILABLE and
   copy.Location = location and
   copy.IsReserved = false and
   book.Copys = copy and
   book.BookBelongs = book and
   book.CopyNum = 1 and
   BookCopy.allInstance()->includes(copy) and
   result = true
",79.02850774420561,79.6343
23, The example rule compares the lowest amount from the first and second transaction amounts to the right side operand. It's assumed that there is at least two transactions. ,self.Transaction.at(0).Amount.min(self.Transaction.at(1).Amount) = 30, self.Transaction Amount.allInstance()->select(amount | amount >= transaction.Amount)->size() <= 2,10.526917628488148,0.0
24,"The NamedElements must be of a type of element that can be a signature for a message (i.e.., an Operation, or
a Signal).",message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal)),NamedElement.allInstances().base_NamedElement->includes(self.base_Signature),3.126017514958335,0.0
25,The owned attributes and owned ends of an AssociationClass are disjoint.,ownedAttribute->intersection(ownedEnd)->isEmpty(),ownedAttribute->asSet()->excludesAll(ownedEnd->asSet()),14.865996369027277,0.0
26,The supplier shall be an element stereotyped by a subtype of AbstractRequirement,"AbstractRequirement.allInstances().base_NamedElement
->includesAll(self.base_Abstraction.client)",AbstractRequirement.allInstances().base_Class->includes(self.base_Class),51.92070044057203,41.60156
27,A Region can have at most one shallow history Vertex.,"subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
select(kind = PseudostateKind::shallowHistory)->size() <= 1",self.shallowHistory->size() <= 1,4.294049893239815,0.0
28,A Stereotype may only generalize or specialize another Stereotype.,"allParents()->forAll(oclIsKindOf(Stereotype))
and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype))
implies c.oclIsKindOf(Stereotype))","generalization.isStereotyped(""generalizedEasing"") implies classifier.generalization.isStereotyped(""specializeEasing"")",1.3825980215567637,15.11978
29," The return value was the set of class Book, including all book in the instance set of class Book. book represented an object of class Book, and book meet:
      At least one c existed in all objects which book was linked to by Copys. c represented an object of class BookCopy, and c meet:
          The attribute Barcode of the object c was equal to barcode","   result = Book.allInstance()->select(book:Book | book.Copys->exists(c:BookCopy | c.Barcode = barcode))
","   result = Book.allInstance()->select(book:Book | book.Copys->includes(c) and c.Barcode = barcode)
",74.75191358314463,63.64457
30,The metaclass association is derived from the getMetaClasses operation.,self.metaClass = self.getMetaClasses(),self.metaClass->forAll(metaclass | not metaclass.isAbstract),7.768562846380176,7.76856
31,Class inheritance should not be used for OperationalTransformations.,self.superClass->isEmpty(),self.base_Class.inheritance.isEmpty() implies self.base_Class.inheritance.isEmpty(),7.7075324887553816,21.48568
32,The parents of a Classifier must be non-final.,parents()->forAll(not isFinalSpecialization),self.parent->isEmpty(),9.469167282754096,0.0
33," sls is the Set of class SalesLineItem, including  which currentSale is linked to
  sub is the Set of Real, including the Subamount of each object in the set sls","   sls:Set(SalesLineItem) = currentSale.ContainedSalesLine,
   sub:Set(Real) = sls->collect(s:SalesLineItem | s.Subamount)
","   sls:Set(SalesLineItem) = currentSale.allTotals() and
   sub:Set(Real) = sls.intersection(currentSale.real)",47.004116956036874,0.0
34," The attribute Price of the object item became newPrice
  The return value was true","   item.Price = newPrice and
   result = true
","   item.Price = newPrice and
   result = true
",100.00000000000004,100.0
35,A ConditionalNode has no InputPins.,input->isEmpty(),condition <> null implies input.oclIsUndefined(),9.287528999566801,0.0
36,The unmarshallType must have at least one StructuralFeature.,unmarshallType.allAttributes()->size() >= 1,unmarshallType.allFeatures()->size() > 0,61.6818645686018,61.68186
37,A ForkNode has one incoming ActivityEdge.,incoming->size()=1,incoming->size() = 1,100.00000000000004,100.0
38,All ownedLiterals must be stereotyped by PermissibleValue,"self.base_Enumeration.ownedLiteral->forAll(x:EnumerationLiteral|
x.stereotypedBy('PermissibleValue')","self.base_Enumeration.ownedLiterals->asSet()->collect(ownedLiterals)->asSet()->asSet() ->collect(supplier->
collect(sourcetype->asSet()).base_Enumeration().base_NamedElement->asSet())->asSet()->collect(sourcetype->includes(sourcetype))",7.190374158168317,0.0
39,The aggregation of an ExtensionEnd is composite.,self.aggregation = AggregationKind::composite,extensionEnd.aggregation = ExtensionAggregationKind::composite,34.57207846419412,34.57208
40,"If this is a Property with a bounded upper limit, then the minimum number of possible children must be less than or
equal to the upper value of the constrained Property.","self->select(s|s.namespace.stereotypedBy('ComplexObjectConstraint'))
.subsettedProperty->union(self.redefinedProperty) ->select(r|r.upper>0) ->
forAll(refProperty| self.namespace.oclAsType(Class).ownedAttribute->
select(sibling|sibling.subsettedProperty->union(sibling.redefinedProperty)->
includes(refProperty)) ->select(p|p.lower>0) ->size()<refProperty.upper )",not (brokenUpper.value.isEmpty()) implies (self.base_Property.lower < self.base_Property.upper),1.1371317055586592,6.14523
41," bookcopy exists
  The object bookcopy is in the instance set of class BookCopy","   bookcopy.oclIsUndefined() = false and
   BookCopy.allInstance()->includes(bookcopy)
","   bookcopy.oclIsUndefined() = false and
   BookCopy.allInstance()->includes(bookcopy)
",100.00000000000004,100.0
42,A QuantityKind cannot be defined in terms of itself. This follows from the quantity calculus used for expressing a derived QuantityKind in terms of base QuantityKinds chosen for a SystemOfQuantities by means of non- contradictory equations,"dependsOnQuantityKinds()->excludes(self)
",baseQuantity<>null implies baseQuantity.base.oclIsKindOf(QuantityKind),4.065425428798724,0.0
43,Transitions outgoing Pseudostates may not have a Trigger.,"source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <>
PseudostateKind::initial) implies trigger->isEmpty()",outgoing->notEmpty() implies trigger->isEmpty(),11.830713730890462,27.38605
44," The value of temporary variable CurrentLoanRequests became rs
  The return value was rs","   self.CurrentLoanRequests = rs and
   result = rs
","   self.CurrentLoanRequests = rs and
   self.returnValue = rs
",51.93071778680675,51.93072
45, The Clock of a startInstant InstantValue is also a on Clock of this TimedExecution.,on -> includesAll(startInstant.onClock),on->includesAll(startInstant.onClock),74.20884818558928,83.61293
46, The return value was item,"   result = item
","   result = item
",0.0,100.0
47,"if ModuleDef is defined in a Container, this Container must be another ModuleDef ",definedIn.notEmpty implies (defined In.oclIsKindOf (ModuleDef) and definedIn <> self),ModuleDef.definition.isPresentInContainer() and ModuleDef.allParents()->includes(self),7.200062223352653,16.50968
48," user exists
  rb doesn't exist","   user.oclIsUndefined() = false and
   rb.oclIsUndefined() = true
","   user.oclIsUndefined() = false and
   rb.oclIsUndefined() = true
",100.00000000000004,100.0
49,The type of the value InputPin must conform to the type of the variable.,value <> null implies value.type.conformsTo(variable.type),variables->forAll(v | v.type.conformsTo(variable.type)),49.24790605054522,0.0
50,All packaged elements must be Archetypes.,self.base_Package.packagedElement->forAll(p|p.stereotypedBy('Archetype')),self.packagedElement->forAll(packedElement | packagedElement.oclIsKindOf(Archetype)),25.396622370511928,59.81236
51,Abstract InterfaceDefs may only derive from other abstract InterfaceDefs,isAbstract implies base->forAll (isAbstract),isAbstract implies abstract=not(isAbstract),25.848657697858535,50.84158
52, cashdesk exists,"   cashdesk.oclIsUndefined() = false
","   cashdesk.oclIsUndefined() = false
",100.00000000000004,100.0
53," loanterm is the object loa in the instance set of class LoanTerm. loa represents an object of class LoanTerm, and loa meets:
      The attribute ItemID of the object loa is equal to termid","   loanterm:LoanTerm = LoanTerm.allInstance()->any(loa:LoanTerm | loa.ItemID = termid)
","   loanterm:LoanTerm = LoanTerm.allInstance()->any(loa:LoanTerm | loa.ItemID = termid)
",100.00000000000004,100.0
54,All of the ownedLiterals must be stereotyped by IdEntry,self.base_Enumeration.ownedLiteral->forAll(ol|ol.stereotypedBy('IdEntry')) ,self.ownedLiteral.stereotypedBy('IdEntry'),15.033932314270844,0.0
55,"If the InstanceSpecification is not a Link, none of its classifiers are associations","not self.oclIsKindOf(Link) implies classifier->forAll(c |
 c.oclIsKindOf(Class))",link->isEmpty() implies classifier->isEmpty(),10.872210738552726,30.06671
56,"The returnValueRecipient must be a Property of a ConnectableElement that is represented by a Lifeline
covered by this InteractionUse.","returnValueRecipient->asSet()->notEmpty() implies
let covCE : Set(ConnectableElement) = covered.represents->asSet() in
covCE->notEmpty() and let classes:Set(Classifier) =
covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in
let allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)-
>asSet() in
allProps->includes(returnValueRecipient)","returnValueRecipient->size() = 1 and
returnValueRecipient.represents.oclIsKindOf(Property) and returnValueRecipient
->includes(coveredElement)",1.042190748281672,9.60668
57," The attribute Barcode of the object bookcopy became barcode
  The attribute Status of the object bookcopy became status
  The attribute Location of the object bookcopy became location
  The attribute IsReserved of the object bookcopy became isreserved
  The return value was true","   bookcopy.Barcode = barcode and
   bookcopy.Status = status and
   bookcopy.Location = location and
   bookcopy.IsReserved = isreserved and
   result = true
","   bookcopy.Barcode = barcode and
   bookcopy.Status = status and
   bookcopy.Location = location and
   bookcopy.IsReserved = isreserved and
   result = true
",100.00000000000004,100.0
58," user exists
  loans exists","   user.oclIsUndefined() = false and
   loans.oclIsUndefined() = false
","   user.oclIsUndefined() = false and
   loans.oclIsUndefined() = false
",100.00000000000004,100.0
59," The attribute IsReserved of the object copy became false
  The attribute IsReserveClosed of the object res became true
  The return value was true","   copy.IsReserved = false and
   res.IsReserveClosed = true and
   result = true
","   copy.IsReserved = false and
   copy.IsReserveClosed = true and
   res.IsReserveClosed = true and
   result = true
",64.71892368478446,64.71892
60,"The selector value, if present, must be a LiteralString or a LiteralInteger.","self.selector->notEmpty() implies
self.selector.oclIsKindOf(LiteralInteger) or
self.selector.oclIsKindOf(LiteralString)",selector- >notEmpty() implies selector->notEmpty(),13.896024861291647,45.86795
61," The attribute OrderStatus of the object op became RECEIVED
  For each object of class OrderEntry in all objects which op was linked to by ContainedEntries, oe represented it(the object) and the following operations were performed:
      The attribute StockNumber of the object oe was equal to the previous value of the attribute StockNumber of the object oe plus the attribute Quantity of the object oe
  The return value was true","   op.OrderStatus = OrderStatus::RECEIVED and
   op.ContainedEntries->forAll(oe:OrderEntry |
    oe.Item.StockNumber = oe.Item.StockNumber@pre + oe.Quantity)
   and
   result = true
","   op.OrderStatus = OrderStatus::RECEIVED and
   op.ContainedEntries->forAll(oe:OrderEntry |
   oe.StockNumber = oe.StockNumber-self.previousValue
",54.34552702625516,69.35828
62,"This Classifier must have exactly one generalization, and that is a «Constraint» Generalization.","self.base_NamedElement.oclIsKindOf(Classifier) implies
(self.base_NamedElement.oclAsType(Classifier).generalization->
forAll(x|x.stereotypedBy('Constrains')) and
(self.base_NamedElement.oclAsType(Classifier).generalization->size() = 1))",self.generalization->size()=1,0.3971694283746033,0.0
63," The attribute CreditScore of the object CurrentLoanRequest became 100
  The attribute Status of the object CurrentLoanRequest became SUBMITTED
  The return value was the attribute CreditScore of the object CurrentLoanRequest","
   self.CurrentLoanRequest.CreditScore = 100 and
   self.CurrentLoanRequest.Status = LoanRequestStatus::SUBMITTED and
   result = self.CurrentLoanRequest.CreditScore
","   self.CurrentLoanRequest.CreditScore = 100 and
   self.CurrentLoanRequest.Status = LoanRequestStatus::SUBMITTED and
   result = CurrentLoanRequest.CreditScore
",85.48651952212401,85.48652
64,a ValueDef must be defined within a ModuleDef,definedIn.oclIsKindOf (ModuleDef),not definedInUid(),11.521590992286539,0.0
65," r is the object lr in the instance set of class LoanRequest. lr represents an object of class LoanRequest, and lr meets:
      The attribute RequestID of the object lr is equal to id","   r:LoanRequest = LoanRequest.allInstance()->any(lr:LoanRequest | lr.RequestID = id)
","   r:LoanRequest = LoanRequest.allInstance()->any(lr:LoanRequest | lr.RequestID = id)
",100.00000000000004,100.0
66,The multiplicity of the result OutputPin is 0..*.,"result.is(0,*)","result.is(0,*.))",66.06328636027612,66.06329
67," user exists
  res exists","   user.oclIsUndefined() = false and
   res.oclIsUndefined() = false
","   user.oclIsUndefined() = false and
   res.oclIsUndefined() = false
",100.00000000000004,100.0
68,All coincident junction instants in a coincidence relation are owned by distinct time bases.,"coincidentJIs->forAll( i,j | i<>j implies i.tb <> j.tb )","junctionInstants->collect(oclIsKindOf(UML::TimeSequence))->collect(oclAsType(UML::TimeSequence))
->asSet()->forAll(uc | uc.allInstances().oclAsType(UML::TimeSequence))->distinct( )",3.2998928639199248,7.89813
69,the number of valid cards for every customer must be equal to the number of programs in which the customer participates. ,"programs->size() = cards->select( valid = true )->size()
",self.program->size() = self.card->size(),31.565314227462352,0.0
70,The multiplicity of the result OutputPin must be 1..1.,"result<>null implies result.is(1,1)",result.range.lower = 1 and result.range.upper = 1,5.816635421147513,0.0
71,A FinalState cannot reference a submachine.,submachine->isEmpty(),stereotypedBy('submachine')->isEmpty(),29.84745896009822,50.54086
72,"The [AOM] ARCHETYPE_HRIN/concept_id must have a value. [AOM] ARCHETYPE_HRIN/concept_id maps to
the name of the «Archetype» Package. ",not(self.base_Package.name.oclIsUndefined()) and (self.base_Package.name<>''),"self.base_Package.navigablePackage.properties->forAll(name|name.toLower() = 'HRIN' and
name.subSequence(1,9) = 'concept_id')",20.337173970907866,28.27153
73, librarian exists,"   librarian.oclIsUndefined() = false
","   librarian.oclIsUndefined() = false
",100.00000000000004,100.0
74, The return value was supplier,"   result = supplier
","   result = supplier
",0.0,100.0
75,"The property ""ownedAttribute"" shall be empty",self.base_Class.ownedAttribute->isEmpty(),self.ownedAttribute->isEmpty(),49.70150471589525,65.58792
76,The participantPackages should be either TerminologyPackage or TerminologyPackageInterface,self.participantPackage->forall(pp|pp.oclIsKindOf(Terminology::TerminologyPac kage)),(participantPackage.oclIsKindOf(TerminologyPackage) or participantPackage.oclIsKindOf(TerminologyPackageInterface)),10.248244771546684,35.71266
77," user is the object u in the instance set of class User. u represents an object of class User, and u meets:
      The attribute UserID of the object u is equal to uid
  copy is the object bc in the instance set of class BookCopy. bc represents an object of class BookCopy, and bc meets:
      The attribute Barcode of the object bc is equal to barcode
  res is the object r in the instance set of class Reserve. r represents an object of class Reserve, and r meets:
      The object r is linked to the object copy by ReservedCopy
      The object r is linked to the object user by ReservedUser","   user:User = User.allInstance()->any(u:User | u.UserID = uid),
   copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode),
   res:Reserve = Reserve.allInstance()->any(r:Reserve | r.ReservedCopy = copy and r.ReservedUser = user)
","   user:User = User.allInstance()->any(u:User | u.UserID = uid),
   copy:BookCopy = BookCopy.allInstance()->any(bc:BookCopy | bc.Barcode = barcode),
   res:Reserve = Reserve.allInstance()->any(r:Reserve | r.ReservedCopy = copy and r.ReservedUser = user)
",100.00000000000004,100.0
78," The object supplier was deleted from the instance set of class Supplier
  The return value was true","   Supplier.allInstance()->excludes(supplier) and
   result = true
","   Supplier.allInstance()->excludes(supplier) and
   result = true
",100.00000000000004,100.0
79," librarian is the object lib in the instance set of class Librarian. lib represents an object of class Librarian, and lib meets:
      The attribute LibrarianID of the object lib is equal to librarianid","   librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = librarianid)
","   librarian:Librarian = Librarian.allInstance()->any(lib:Librarian | lib.LibrarianID = librarianid)
",100.00000000000004,100.0
80,"A «CORBAIndexedType»-stereotyped Class participates in exactly one
Association that has a navigable opposite AssociationEnd",self.navigableOppositeEnds->size = 1,self.associationEnd->size=1,48.892302243490086,48.8923
81,All ActivityEdges outgoing from loopVariable OutputPins must have targets within the LoopNode.,allOwnedNodes()->includesAll(loopVariable.outgoing.target),loopVariable.outgoing->forAll(edge | edge.target->exists(target)),7.922250668634465,0.0
82," The object store was deleted from the instance set of class Store
  The return value was true","   Store.allInstance()->excludes(store) and
   result = true
","   Store.allInstance()->excludes(store) and
   result = true
",100.00000000000004,100.0
83, user doesn't exist,"   user.oclIsUndefined() = true
","   user.oclIsUndefined() = true
",100.00000000000004,100.0
84,The type of the value InputPin conforms to the type of the Association end.,value<>null implies value.type.conformsTo(end.type),value.type.conformsTo(end.type),60.653065971263366,0.0
85,The behavior may only have non-stream in or return parameters.,behavior <> null implies behavior.ownedParameter->forAll(not isStream and (direction=ParameterDirectionKind::in or direction=ParameterDirectionKind::return)),(behavior = self.behavior) and (nonStream = true or return = false),3.3321014846167456,15.75095
86," All of the quantityKinds that are measurementUnits of Units in the SystemOfUnits shall be defined in the 
systemOfQuantities of that SystemOfUnits.","getEffectiveSystemOfQuantities() = null or let aqk : Set(QuantityKind) = 
getEffectiveSystemOfQuantities().allQuantityKinds() in ->allUnits()
->forAll(u | aqk
->includesAll(getKindOfQuantitiesForMeasurementUnit(u)))",self.allMeasurementUnits()->includesAll(self.quantityKinds),3.404339553508142,10.29571
87,All Transitions of a ProtocolStateMachine must be ProtocolTransitions.,region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition))),stateMachine.transitions->forAll(transition | transition.oclIsTypeOf(ProtocolTransition)).toCollection() = protocolTransitions,29.77032831016683,44.54984
88,endType is derived from the types of the member ends.,self.endType = self.memberEnd->collect(e | e.type),"endType = memberEnd.type.allFeatures()
->union(end.type)",12.39899236095509,0.0
89, The return value was productcatalog,"   result = productcatalog
","   result = productcatalog
",0.0,100.0
90,"The type of the port at the last position of the onNestedPort list must own or inherit the port of the stereotyped
trigger.","self.onNestedPort->last().type.oclAsType(UML::Classifier).allFeatures()
->includes(self.base_Trigger.port)","let trigger: UML::Trigger = self.onNestedPort->last().trigger.base_Class
->includes(trigger) in
trigger.base_Class->select(o|o.type.oclAsType(UML::Trigger).type) in
trigger->includes(trigger)",31.09205615249225,55.76025
91," bookcopy is the object boo in the instance set of class BookCopy. boo represents an object of class BookCopy, and boo meets:
      The attribute Barcode of the object boo is equal to barcode","   bookcopy:BookCopy = BookCopy.allInstance()->any(boo:BookCopy | boo.Barcode = barcode)
","   bookcopy:BookCopy = BookCopy.allInstance()->any(boo:BookCopy | boo.Barcode = barcode)
",100.00000000000004,100.0
92,The source and target Vertices of a Transition must be contained in the same StateMachine as the Transition,"let stateMachine = self.containingStateMachine() in
source.containingStateMachine() = stateMachine and
target.containingStateMachine() = stateMachine",(source->forAll(vertex->includes(vertex)) and target->forAll(vertex->includes(vertex)),2.559082301052818,0.0
93,A «CORBAComponent» can only inherit from a «CORBAComponent» or a «CORBAInterface»:,"self.generalization->forAll (g : Generalization | g.parent.isStereotyped (""CORBAComponent"") or g.parent.isStereotyped(""CORBAInterface""))","self.isStereotyped(""CORBAComponent"") or self.isStereotyped(""CORBAInterface"")",32.66425370352714,57.15265
94,A TimedEvent is bound to one Clock.,on->size( ) = 1,boundTo->size()=1,80.91067115702207,80.91067
95,"A «CORBAConstants»-stereotyped Class must be directly contained by a
«CORBAModule»-stereotyped package.","self.namespace.isStereotyped(""CORBAModule"")","self.generalization->select(isStereotyped(""CORBAModule"")).classInScope(self.module)->asSet()->excludes(self.generalization)",16.027177058641,16.02718
96,"The connection point references used as destinations/sources of Transitions associated with a submachine State
must be defined as entry/exit points in the submachine StateMachine.","self.isSubmachineState implies (self.connection->forAll (cp |
cp.entry->forAll (ps | ps.stateMachine = self.submachine) and
cp.exit->forAll (ps | ps.stateMachine = self.submachine)))",self.base_State.allOwnedDestinations()->excludesAll(self.base_State.allOwnedSource()),3.54677930479945,0.0
97," The attribute Id of the object store became id
  The attribute Name of the object store became name
  The attribute Address of the object store became address
  The attribute IsOpened of the object store became isopened
  The return value was true","   store.Id = id and
   store.Name = name and
   store.Address = address and
   store.IsOpened = isopened and
   result = true
","   store.Id = id and
   store.Name = name and
   store.Address = address and
   store.IsOpened = isopened and
   result = true
",100.00000000000004,100.0
98,The denominator of a rational number shall not be zero.,denominator <> 0,denominator.max.value = 0,7.809849842300637,0.0
99," The set of all Units in a given SystemOfUnits shall be capable of being partitioned into two disjoint, covering subsets: 
the set of base Units (typically chosen to be mutually independent) and all its complement, the set of derived Units, each of which can be expressed in terms of the base Units",allUnits()->includesAll(allBaseUnits()),"self.allUnits->forAll(unit | unit->forAll( unit | unit.isStereotyped(""DisjointSystemOfUnits"").isSimple and
unit.base->without(unit)))",2.8886790607758566,0.0
100,This Property must redefine or subset a Reference Model Property.,"self.base_NamedElement.oclIsKindOf(Property) implies
self.base_NamedElement.oclAsType(Property)->forAll(p|p.redefinedProperty->
notEmpty() or p.subsettedProperty->notEmpty()) ",self.base_Property.referenceModel->forAll(g|g.oclIsKindOf(ReferenceModel)),7.5784266821375255,18.01599
101,"If this Archetype root is a redefinition of another external node, then that external node must have as an ancestor the
Archetype definition which is the parent of this Archetype.","self.base_Classifier.general->forAll(g|g.stereotypedBy('ArchetypeRoot'))
implies self.base_Classifier.general.general ->
forAll(g|g.namespace=self.base_Classifier.namespace.oclAsType(Package).
packageImport.importedPackage->select(p|p.stereotypedBy('Archetype'))->
asSequence()->first())","let definition : Specie = self.root.implies(redefinedNode->forAll(c |
self.definition.oclIsKindOf(GeneralizedNode) and
definition.parent = self)",2.400239499509325,9.58921
102,A UseCase must have a name.,name -> notEmpty (),name->notEmpty(),54.75182535069452,54.75183
103,The multiplicity of the target IinputPin is 1..1.,"target.is(1,1)","self.object = target.asSequence() and self.target.is(1,1)",26.46015952359329,26.46016
104,"The example rule checks every transaction amount in the message and if the amount 30 is not found, true will be returned.",self.Transaction.Amount->excludes(30),self.Transaction.Amount.allInstances().base_Transaction.Amount->excludes(30),43.903048853236896,63.66237
105,The Property must be an Association memberEnd.,end.association <> null,not self.isAssociation,9.688464563433238,0.0
106,It’s an association stereotyped «CORBAUses»:,"self.isStereotyped(""CORBAUses”)","self.connection->exists(participant.isStereotyped(""CORBAUses""))",19.56475149792291,19.56475
107,Full ports shall not be behavioral (isBehavior=false).,not self.base_Port.isBehavior,not self.isBehavior,26.013004751144457,26.013
108," productcatalog is the object pro in the instance set of class ProductCatalog. pro represents an object of class ProductCatalog, and pro meets:
      The attribute Id of the object pro is equal to id","   productcatalog:ProductCatalog = ProductCatalog.allInstance()->any(pro:ProductCatalog | pro.Id = id)
","   productcatalog:ProductCatalog = ProductCatalog.allInstance()->any(pro:ProductCatalog | pro.Id = id)
",100.00000000000004,100.0
109, The example rule mandates the usage of both Creditor and Debtor name when Amount exceeds 200,"self.Amount > 200 implies

self.Debtor.Name->size() = 1 and self.Creditor.Name->size() = 1",self.Creditor.amount > 200,2.1101579930312004,0.0
110,All owned attributes are attribute constraints. Each must subset or redefine a reference model property. ,self.namespace.stereotypedBy('ComplexObjectConstraint') implies ((self.subsettedProperty->notEmpty()) or( self.redefinedProperty->notEmpty())),associatedAttribute->forAll(c | self.base_Attribute.base_Constraint.ownedAttribute->forAll(a | not a.isComposite) and not a.isUnique() ),6.276332353857551,0.0
111," The object bankcard was deleted from the instance set of class BankCard
  The return value was true","   BankCard.allInstance()->excludes(bankcard) and
   result = true
","   BankCard.allInstance()->excludes(bankcard) and
   result = true
",100.00000000000004,100.0
112,The lower bound must be a non-negative integer literal.,lowerBound()->notEmpty() implies lowerBound() >= 0,bound <= 0,2.04231330436193,0.0
113," item exists
  The object item is in the instance set of class Item","   item.oclIsUndefined() = false and
   Item.allInstance()->includes(item)
","   item.oclIsUndefined() = false and
   Item.allInstance()->includes(item)
",100.00000000000004,100.0
114,"The decider Pin must be on an Action in the test section of the Clause and must be of type Boolean with
multiplicity 1..1.","test.oclAsType(Action).allActions().output->includes(decider) and
decider.type = Boolean and
decider.is(1,1) ","decider.oclIsKindOf(Permission) and
decider.action->select(oclIsKindOf(Action)))",12.786972620200748,0.0
115," loan exists
  The attribute Status of the object loan is equal to LSOPEN","   loan.oclIsUndefined() = false and
   loan.Status = LoanStatus::LSOPEN
","   loan.oclIsUndefined() = false and
   loan.Status = LoanStatus::LSOPEN
",100.00000000000004,100.0
116,"Messages cannot cross boundaries of CombinedFragments or their operands. This is true if and only if both
MessageEnds are enclosed within the same InteractionFragment (i.e., an InteractionOperand or an Interaction).","sendEvent->notEmpty() and receiveEvent->notEmpty() implies
let sendEnclosingFrag : Set(InteractionFragment) =
sendEvent->asOrderedSet()->first().enclosingFragment()
in
let receiveEnclosingFrag : Set(InteractionFragment) =
receiveEvent->asOrderedSet()->first().enclosingFragment()
in sendEnclosingFrag = receiveEnclosingFrag","(self.operator->none()) implies (self.operand->size() <> 0 and
MessageType.allInstances().base_MessageType.memberEnd->includes(self.operand) and
self.opposite.isTerminal())",4.8830547894419505,9.84728
117,Every collaborationRole in the Collaboration is bound within the CollaborationUse.,type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role))),collaboration.namespace.conformsTo(use),1.0569482404431718,0.0
118, The return value was true,"   result = true
","   result = true
",0.0,100.0
119,The exit Pseudostates must be Pseudostates with kind exitPoint.,exit->forAll(kind = PseudostateKind::exitPoint),exitPoint.kind = PseudostateKind::exitPoint,46.76143972269792,0.0
120,Only binary Associations can be aggregations.,memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none)),isBinary implies isAssociation implies isAssociation,0.03234087009630861,2.31395
121,the first element of this ordered set must be named Silver as follows,levels->first().name = 'Silver',self.name.oclIsKindOf(Silver),11.59119922599073,0.0
122," supplier is the object sup in the instance set of class Supplier. sup represents an object of class Supplier, and sup meets:
      The attribute Id of the object sup is equal to id","   supplier:Supplier = Supplier.allInstance()->any(sup:Supplier | sup.Id = id)
","   supplier:Supplier = Supplier.allInstance()->any(sup:Supplier | sup.Id = id)
",100.00000000000004,100.0
123," u represented the object of class Student
  The object u was created
  The attribute UserID of the object u became userID
  The attribute Name of the object u became name
  The attribute Email of the object u became email
  The attribute Password of the object u became password
  The attribute Sex of the object u became sex
  The attribute Faculty of the object u became faculty
  The attribute LoanedNumber of the object u became 0
  The attribute BorrowStatus of the object u became NORMAL
  The attribute SuspensionDays of the object u became 0
  The attribute OverDueFee of the object u became 0
  The attribute Major of the object u became major
  The attribute Programme of the object u became programme
  The attribute RegistrationStatus of the object u became registrationStatus
  The object u was put into the instance set of class User
  The object u was put into the instance set of class Student
  The return value was true","   let u:Student in
   u.oclIsNew() and
   u.UserID = userID and
   u.Name = name and
   u.Email = email and
   u.Password = password and
   u.Sex = sex and
   u.Faculty = faculty and
   u.LoanedNumber = 0 and
   u.BorrowStatus = BorrowStatus::NORMAL and
   u.SuspensionDays = 0 and
   u.OverDueFee = 0 and
   u.Major = major and
   u.Programme = programme and
   u.RegistrationStatus = registrationStatus and
   User.allInstance()->includes(u) and
   Student.allInstance()->includes(u) and
   result = true
","   let u:Student in
   u.oclIsNew() and
   u.UserID = userID and
   u.Name = name and
   u.Email = email and
   u.Password = password and
   u.Sex = sex and
   u.Faculty = faculty and
   u.LoanedNumber = 0 and
   u.BorrowStatus = BorrowStatus::NORMAL and
   u.OverDueFee = 0 and
   u.Major = major and
   u.Programme = programme and
   u.RegistrationStatus = registrationStatus and
   user.allInstance()->includes(u) and
   Student.allInstance()->includes(u) and
   result = true
",92.68771283485239,97.19262
124,"ControlFlows may not have ObjectNodes at either end, except for ObjectNodes with control type.","(source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and
(target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)","end->isEmpty() and
(type.oclIsKindOf(UML::ObjectNode) or controlType.oclIsKindOf(UML::ControlFlow)))",10.42048015905657,11.56228
125,"All navigable opposite AssociationEnds of a «CORBAValue»-stereotyped Class
must have visibility “public” or “private.”","self.navigableOppositeEnds->forAll(end | end.visibility = #public or
end.visibility = #private)","self.navigableOppositeEnds
->forAll(end | end.visibility = #public or
end.visibility = #private)",84.53479389161355,90.411
126,No pair of classes exists such that they are both equivalent and disjoint,"not Class.allInstances()->exists(c | self.isEquivalentTo(c) and
 self.isDisjointWith(c) or self.hasDisjointAncestorsWith(c)))",self.equivalentClass->size()>=2 and self.disjointClass->size()= 2,5.686893639215849,0.0
127,AcceptEventActions may have no input pins.,input->size() = 0,parameter->isEmpty(),15.848738972120703,15.84874
128,"The type, ordering, and multiplicity of an argument InputPin must be the same as the corresponding attribute
of the signal.","let attribute: OrderedSet(Property) = signal.allAttributes() in
Sequence{1..argument->size()}->forAll(i |
argument->at(i).type.conformsTo(attribute->at(i).type) and
argument->at(i).isOrdered = attribute->at(i).isOrdered and argument->at(i).compatibleWith(attribute->at(i)))","argument->forAll(p | p.type = signal.argument.type) and
argument->forAll(q |
param-> forAll(d |
d.type->includes(type) and
param->forAll(v | v.isOrdered = signal.argument.isOrdered and
argument->at(d).type
->includes(attribute)) and
argument->at(d).isOrdered = signal.argument.isOrdered and
argument->at(d).isOrdered and
argument->at(d).isOrdered and
argument->at(d).isOrdered = signal.at(d).type) in
param->at(d).isOrdered and
d.isOrdered=true and
param->at(d.isOrdered = signal.at(d.at(d).isOrdered and
argument->at(d).isOrdered and
argument->at(d).isOrdered = signal.at(d).isOrdered and
argument->at(d).isOrdered and
argument->at(d).isOrdered)",14.548682635147117,27.37451
129,The visibility of at least one end must allow access from the context Classifier of the WriteLinkAction.,"endData.end->exists(end |
end.type=_'context' or
end.visibility=VisibilityKind::public or
end.visibility=VisibilityKind::protected and
endData.end->exists(other |
other<>end and _'context'.conformsTo(other.type.oclAsType(Classifier))))",self.target.visibility <> 'protected' and self.target.context.classifier->exists (isAccessible),1.646327428172013,14.81553
130,A DurationConstraint has either one or two constrainedElements,constrainedElement->size() = 1 or constrainedElement->size()=2,constrainedElement->size() = 1 and constrainedElement->forAll(e | e.constrainedElement->size() = 2),47.913131225520395,0.0
